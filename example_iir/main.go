package main

import (
	"fmt"
	"log"
	"math"
	"os"

	"github.com/dhinojosac/godsp/iirfilter"
	"github.com/dhinojosac/godsp/spectral"
)

const START_COMMAND = 9.910
const FINISH_COMMAND = 9.911
const FREQ_SAMPLE = 64

//var inputTest []float64 = []float64{8007.000000000, 8623.000000000, 8616.000000000, 7680.000000000, 8496.000000000, 8241.000000000, 7460.000000000, 8305.000000000, 7995.000000000, 7418.000000000, 8502.000000000, 8082.000000000, 7576.000000000, 8796.000000000, 8039.000000000, 7407.000000000, 8431.000000000, 7984.000000000, 7360.000000000, 8515.000000000, 7859.000000000, 7267.000000000, 8413.000000000, 7666.000000000, 7239.000000000, 8325.000000000, 7481.000000000, 7319.000000000, 8258.000000000, 7433.000000000, 7458.000000000, 8272.000000000, 7394.000000000, 7474.000000000, 8150.000000000, 7144.000000000, 7437.000000000, 8087.000000000, 6935.000000000, 7462.000000000, 7953.000000000, 6899.000000000, 7575.000000000, 7811.000000000, 6841.000000000, 7304.000000000, 7821.000000000, 6792.000000000, 7442.000000000, 8012.000000000, 6916.000000000, 7426.000000000, 8368.000000000, 7487.000000000, 7881.000000000, 8958.000000000, 8311.000000000, 8520.000000000, 9613.000000000, 8863.000000000, 8783.000000000, 9880.000000000, 9188.000000000, 8755.000000000, 9840.000000000, 9129.000000000, 8524.000000000, 8720.000000000, 8061.000000000, 8661.000000000, 8356.000000000, 7566.000000000, 8327.000000000, 8453.000000000, 7420.000000000, 7872.000000000, 8504.000000000, 7361.000000000, 7769.000000000, 8375.000000000, 7294.000000000, 7884.000000000, 8251.000000000, 7281.000000000, 8035.000000000, 8057.000000000, 7177.000000000, 8045.000000000, 7817.000000000, 7128.000000000, 8021.000000000, 7739.000000000, 7009.000000000, 7852.000000000, 7697.000000000, 7031.000000000, 7900.000000000, 7705.000000000, 7075.000000000, 8196.000000000, 7738.000000000, 7219.000000000, 8438.000000000, 7764.000000000, 7259.000000000, 8448.000000000, 7730.000000000, 7391.000000000, 8472.000000000, 7588.000000000, 7432.000000000, 8325.000000000, 7467.000000000, 7445.000000000, 8212.000000000, 7260.000000000, 7396.000000000, 8046.000000000, 6965.000000000, 7335.000000000, 8215.000000000, 7404.000000000, 7656.000000000, 8497.000000000, 7642.000000000, 8189.000000000, 9031.000000000, 8135.000000000, 8768.000000000, 9361.000000000, 8449.000000000, 9114.000000000, 9284.000000000, 8346.000000000, 8746.000000000, 9448.000000000, 8282.000000000, 8478.000000000, 9234.000000000, 8278.000000000, 8228.000000000, 9022.000000000, 8084.000000000, 7906.000000000, 8856.000000000, 8042.000000000, 7688.000000000, 8807.000000000, 8187.000000000, 8158.000000000, 7571.000000000, 8346.000000000, 8085.000000000, 7317.000000000, 8179.000000000, 7931.000000000, 7210.000000000, 7945.000000000, 7951.000000000, 7115.000000000, 7972.000000000, 7767.000000000, 7110.000000000, 8049.000000000, 7771.000000000, 7127.000000000, 8236.000000000, 7687.000000000, 7173.000000000, 8349.000000000, 7714.000000000, 7209.000000000, 8376.000000000, 7657.000000000, 7343.000000000, 8420.000000000, 7579.000000000, 7484.000000000, 8390.000000000, 7521.000000000, 7556.000000000, 8260.000000000, 7258.000000000, 7394.000000000, 8303.000000000, 7429.000000000, 7432.000000000, 8187.000000000, 7236.000000000, 7416.000000000, 8204.000000000, 7241.000000000, 7824.000000000, 8655.000000000, 7796.000000000, 8533.000000000, 9150.000000000, 8311.000000000, 9081.000000000, 9238.000000000, 8357.000000000, 9211.000000000, 8995.000000000, 8205.000000000, 9036.000000000, 8728.000000000, 8030.000000000, 9039.000000000, 8494.000000000, 7702.000000000, 8242.000000000, 8399.000000000, 7523.000000000, 7945.000000000, 8464.000000000, 7465.000000000, 7913.000000000, 8534.000000000, 7369.000000000, 7903.000000000, 8600.000000000, 7525.000000000, 7725.000000000, 8551.000000000, 7676.000000000, 7483.000000000, 8514.000000000, 7607.000000000, 7418.000000000, 8497.000000000, 7742.000000000, 7353.000000000, 8575.000000000, 7829.000000000, 7102.000000000, 7937.000000000, 8039.000000000, 7185.000000000, 7525.000000000, 8192.000000000, 7049.000000000, 7573.000000000, 8278.000000000, 7220.000000000, 7476.000000000, 8136.000000000, 6997.000000000, 7488.000000000, 7988.000000000, 6973.000000000, 7635.000000000, 7978.000000000, 7129.000000000, 8074.000000000, 8204.000000000, 7614.000000000, 8681.000000000, 8663.000000000, 8196.000000000, 9367.000000000, 9125.000000000, 8632.000000000, 9423.000000000, 9192.000000000, 8522.000000000, 9425.000000000, 9029.000000000, 8418.000000000, 9517.000000000, 8909.000000000, 8242.000000000, 9345.000000000, 8584.000000000, 8020.000000000, 9102.000000000, 8264.000000000, 7931.000000000, 8925.000000000, 8032.000000000, 7957.000000000, 8805.000000000, 7912.000000000, 7922.000000000, 8662.000000000, 7639.000000000, 7869.000000000, 8522.000000000, 7353.000000000, 7746.000000000, 8529.000000000, 7425.000000000, 7631.000000000, 8238.000000000, 7541.000000000, 7541.000000000, 8273.000000000, 7733.000000000, 7034.000000000, 7915.000000000, 7789.000000000, 7015.000000000, 7708.000000000, 7930.000000000, 7002.000000000, 7501.000000000, 8032.000000000, 7228.000000000, 7483.000000000, 8136.000000000, 7530.000000000, 7571.000000000, 8440.000000000, 7548.000000000, 7523.000000000, 8512.000000000, 7713.000000000, 7373.000000000, 8169.000000000, 8013.000000000, 7464.000000000, 8550.000000000, 8644.000000000, 8151.000000000, 9241.000000000, 9185.000000000, 8698.000000000, 9872.000000000, 9474.000000000, 8878.000000000, 10031.000000000, 9337.000000000, 8741.000000000, 9780.000000000, 8995.000000000, 8485.000000000, 9485.000000000, 8765.000000000, 8141.000000000, 9196.000000000, 8426.000000000, 7924.000000000, 8933.000000000, 8054.000000000, 7877.000000000, 8783.000000000, 7923.000000000, 7925.000000000, 8725.000000000, 7810.000000000, 7930.000000000}

var sosTest [][]float64 = [][]float64{
	{1.000000000, -0.662545476, 1.000000000, 1.000000000, -1.800924469, 0.831128711},
	{1.000000000, -1.705327546, 1.000000000, 1.000000000, -1.800524353, 0.874360793},
	{1.000000000, -1.999907547, 1.000000000, 1.000000000, -1.921319658, 0.926692121},
	{1.000000000, -1.819789438, 1.000000000, 1.000000000, -1.835909671, 0.940934118},
	{1.000000000, -1.999416103, 1.000000000, 1.000000000, -1.974803148, 0.977086804},
	{1.000000000, -1.845642825, 1.000000000, 1.000000000, -1.864612436, 0.983820606},
	{1.000000000, -1.999015841, 1.000000000, 1.000000000, -1.990704014, 0.992367080},
	{1.000000000, -1.998843277, 1.000000000, 1.000000000, -1.996655164, 0.998152525},
}

var gainTest float64 = 0.001266188
var orderTest int = 16

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {
	fout, err := os.Create("out.dat")
	check(err)
	fpsd, err := os.Create("psd.dat")
	check(err)

	var inputTest []float64
	i := 0
	temp := 0.0

	for {
		//check start command
		for {
			fmt.Scanf("%f\n", &temp)
			if temp == START_COMMAND {
				log.Printf("Start PSD\n")
				break
			}
		}

		// Fill buffer with data from file
		for {
			fmt.Scanf("%f\n", &temp)
			if temp == FINISH_COMMAND {
				log.Printf("Finish PSD\n")
				break
			}
			inputTest = append(inputTest, temp)
			i++
		}

		//Test Add padding
		inputTest, _ = iirfilter.AddPadding(inputTest, 50) //add data to input

		output, err := iirfilter.Filfilt(sosTest, gainTest, orderTest, inputTest)
		if err != nil {
			log.Fatalln(err)
		}

		//Test remove padding
		output, _ = iirfilter.RemovePadding(output, 50) //add data to input

		for i := range output {
			fmt.Fprintf(fout, "%F %f\n", inputTest[i], output[i])
		}

		// To save the output to a file
		pwelch_options := &spectral.PwelchOptions{}
		pwelch_options.NFFT = (1024)
		iPxx, freqs := spectral.Pwelch_stop(inputTest, FREQ_SAMPLE, pwelch_options, 20.0)
		oPxx, _ := spectral.Pwelch_stop(output, FREQ_SAMPLE, pwelch_options, 20.0)

		for i, _ := range iPxx {
			//fmt.Printf("f:%f  p:%f \n", freq, Pxx[i])
			iPxx_scaled := 10 * math.Log10(iPxx[i]) //pass to dB
			oPxx_scaled := 10 * math.Log10(oPxx[i]) //pass to dB
			fmt.Fprintf(fpsd, "%f %f %f\n", freqs[i], iPxx_scaled, oPxx_scaled)
		}

		break
	}
}
